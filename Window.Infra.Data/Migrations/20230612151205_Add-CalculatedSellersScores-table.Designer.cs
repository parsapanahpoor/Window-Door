// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Window.Data.Context;

#nullable disable

namespace Window.Infra.Data.Migrations
{
    [DbContext(typeof(WindowDbContext))]
    [Migration("20230612151205_Add-CalculatedSellersScores-table")]
    partial class AddCalculatedSellersScorestable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Window.Domain.Entities.Account.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("RoleUniqueName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4655),
                            IsDelete = false,
                            RoleUniqueName = "Admin",
                            Title = "Admin"
                        },
                        new
                        {
                            Id = 2m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4682),
                            IsDelete = false,
                            RoleUniqueName = "Support",
                            Title = "Support"
                        },
                        new
                        {
                            Id = 3m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4691),
                            IsDelete = false,
                            RoleUniqueName = "Seller",
                            Title = "Seller"
                        },
                        new
                        {
                            Id = 4m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4698),
                            IsDelete = false,
                            RoleUniqueName = "SellerMaster",
                            Title = "SellerMaster"
                        });
                });

            modelBuilder.Entity("Window.Domain.Entities.Account.RolePermission", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("PermissionId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Window.Domain.Entities.Account.User", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("BanForTicket")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailActivationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExpireMobileSMSDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileConfirm")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobileActivationCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShopName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("WalletBalance")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Window.Domain.Entities.Account.UserRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Window.Domain.Entities.Article.Article", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("AuthorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ShortKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Window.Domain.Entities.Brand.MainBrand", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<bool>("Alominum")
                        .HasColumnType("bit");

                    b.Property<string>("BrandLogo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("UPVC")
                        .HasColumnType("bit");

                    b.Property<bool>("Yaragh")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("MainBrands");
                });

            modelBuilder.Entity("Window.Domain.Entities.Brand.YaraghBrand", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("SellerType")
                        .HasColumnType("int");

                    b.Property<string>("YaraghBrandLogo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("YaraghBrandName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("YaraghBrands");
                });

            modelBuilder.Entity("Window.Domain.Entities.BulkSMS.BulkSMS", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("BulkSMSTargetPersonType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BulkSMS");
                });

            modelBuilder.Entity("Window.Domain.Entities.Comment.Comment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RequestForContractStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("SellerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Window.Domain.Entities.Contact.Ticket", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadByOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("OnWorking")
                        .HasColumnType("bit");

                    b.Property<decimal>("OwnerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<int?>("TicketType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Window.Domain.Entities.Contact.TicketMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SenderId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("TicketId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("TicketId");

                    b.ToTable("TicketMessages");
                });

            modelBuilder.Entity("Window.Domain.Entities.Contract.RequestForContract", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("RequestForContractType")
                        .HasColumnType("int");

                    b.Property<decimal>("SellerId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("RequestForContracts");
                });

            modelBuilder.Entity("Window.Domain.Entities.Counseling.Counseling", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("Counselings");
                });

            modelBuilder.Entity("Window.Domain.Entities.Glass.Glass", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GlassName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Glasses");
                });

            modelBuilder.Entity("Window.Domain.Entities.Inquiry.LogInquiryForUser", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal?>("BrandId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("CityId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("CountryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("GlassId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("SellerType")
                        .HasColumnType("int");

                    b.Property<decimal?>("StateId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("UserMAcAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LogInquiryForUsers");
                });

            modelBuilder.Entity("Window.Domain.Entities.Inquiry.LogInquiryForUserDetail", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("CountOfSample")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("KatibeSize")
                        .HasColumnType("int");

                    b.Property<decimal>("LogInquiryForUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("SampleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LogInquiryForUserId");

                    b.HasIndex("SampleId");

                    b.ToTable("logInquiryForUserDetails");
                });

            modelBuilder.Entity("Window.Domain.Entities.Location.State", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ParentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("UniqueName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Window.Domain.Entities.Log.LogForBrands", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal?>("CityId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("CountryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("MainBrandId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal?>("StateId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MainBrandId");

                    b.ToTable("LogForBrands");
                });

            modelBuilder.Entity("Window.Domain.Entities.Log.LogForInquiry", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("CityId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CountryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("SellerType")
                        .HasColumnType("int");

                    b.Property<decimal>("StateId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("LogForInquiry");
                });

            modelBuilder.Entity("Window.Domain.Entities.Log.LogForVisitSellerProfile", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LogForVisitSellerProfiles");
                });

            modelBuilder.Entity("Window.Domain.Entities.Log.LogResultOfUserInquiryWithSellersInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("BrandId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("LogInquiryForUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("SellerScore")
                        .HasColumnType("int");

                    b.Property<string>("SellerShopName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SellerUserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("LogResultOfUserInquiryWithSellersInfos");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.Market", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("ActivationTariff")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("MarketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MarketPersonalsInfoState")
                        .HasColumnType("int");

                    b.Property<decimal?>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Market");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketChargeInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CurrentAccountCharge")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("UserId");

                    b.ToTable("MarketChargeInfo");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketLinks", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LinkTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MarketId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("UserId");

                    b.ToTable("MarketLinks");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketPersonalInfo", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal?>("CityId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CountryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("MarketPersonalsInfoState")
                        .HasColumnType("int");

                    b.Property<int>("NationalCode")
                        .HasColumnType("int");

                    b.Property<string>("PeriodTimesOfWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoOfBusinessLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoOfNationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RejectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SellerType")
                        .HasColumnType("int");

                    b.Property<decimal?>("StateId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("WorkAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("MarketId")
                        .IsUnique();

                    b.HasIndex("StateId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MarketPersonalInfo");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketUsers", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("MarketUser");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketWorkSamle", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarketId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("WorkSampleImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkSampleTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.HasIndex("UserId");

                    b.ToTable("MarketWorkSamle");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.KhadamatePasAzForosh", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("macAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("KhadamatePasAzForosh");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.PasokhGoie", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("macAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PasokhGoie");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.ScoreForMarket", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("macAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ScoreForMarkets");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.SehateEtelaAt", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("macAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SehateEtelaAt");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.TaAhodeZamaneTahvil", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("macAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TaAhodeZamaneTahvil");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.GlassPricing", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GlassId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GlassId");

                    b.HasIndex("UserId");

                    b.ToTable("GlassPricings");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.Product", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<decimal>("CityId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CountryId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("MainBrandId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("SellerType")
                        .HasColumnType("int");

                    b.Property<decimal>("StateId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MainBrandId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.ProductMainBrandPrice", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("MainBrandId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SegmentId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MainBrandId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SegmentId");

                    b.ToTable("ProductMainBrandPrices");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.ProductTypeCategory", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductTypeCategories");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4713),
                            IsDelete = false,
                            Name = "کشویی",
                            ProductType = 0
                        },
                        new
                        {
                            Id = 2m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4723),
                            IsDelete = false,
                            Name = "کتیبه",
                            ProductType = 0
                        },
                        new
                        {
                            Id = 3m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4730),
                            IsDelete = false,
                            Name = "کتیبه",
                            ProductType = 1
                        },
                        new
                        {
                            Id = 4m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4737),
                            IsDelete = false,
                            Name = "درب",
                            ProductType = 1
                        },
                        new
                        {
                            Id = 5m,
                            CreateDate = new DateTime(2023, 6, 12, 18, 42, 4, 424, DateTimeKind.Local).AddTicks(4744),
                            IsDelete = false,
                            Name = "لولایی",
                            ProductType = 1
                        });
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.ProductYaraghBrandPrice", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SegmentId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("YaraghBrandId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("YaraghBrandId");

                    b.ToTable("ProductYaraghBrandPrices");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.SegmentPricing", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SegmentId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SegmentId");

                    b.ToTable("SegmentPricings");
                });

            modelBuilder.Entity("Window.Domain.Entities.QuestionAnswer.QuestionAnswer", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("Window.Domain.Entities.Sample.Sample", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<bool>("Aluminum")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Door")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("Keshoie")
                        .HasColumnType("bit");

                    b.Property<bool>("Lolaie")
                        .HasColumnType("bit");

                    b.Property<int>("MaxHeight")
                        .HasColumnType("int");

                    b.Property<int>("MaxWidth")
                        .HasColumnType("int");

                    b.Property<int>("MinHeight")
                        .HasColumnType("int");

                    b.Property<int>("MinWidth")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("SegmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("UPVC")
                        .HasColumnType("bit");

                    b.Property<bool>("Window")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Window.Domain.Entities.Sample.SampleSelectedSegment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("SampleId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("SegmentId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("SegmentId");

                    b.ToTable("SampleSelectedSegments");
                });

            modelBuilder.Entity("Window.Domain.Entities.Score.CalculatedSellersScore", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<int>("CalculatedScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<decimal>("UserSellerId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.ToTable("CalculatedSellersScores");
                });

            modelBuilder.Entity("Window.Domain.Entities.Segment.Segment", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<bool>("Aluminum")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("SegmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("UPVC")
                        .HasColumnType("bit");

                    b.Property<bool>("Yaragh")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Window.Domain.Entities.SiteSetting.EmailSetting", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("EnableSsL")
                        .HasColumnType("bit");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefaultEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("Smtp")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            CreateDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "برنامه ی درب و پنجره",
                            EnableSsL = true,
                            From = "parsapanahpoor77@gmail.com",
                            IsDefaultEmail = true,
                            IsDelete = false,
                            Password = "54511441",
                            Port = 587,
                            Smtp = "smtp.gmail.com",
                            UserName = "برنامه ی درب و پنجره"
                        });
                });

            modelBuilder.Entity("Window.Domain.Entities.SiteSetting.SiteSetting", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<string>("AlertForSellerForSeenProfile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ChargeOfNewMarkets")
                        .HasColumnType("int");

                    b.Property<int>("ChargeTariffAboutListOfInquiry")
                        .HasColumnType("int");

                    b.Property<int>("ChargeTariffAboutSellerDetail")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("SMSForDisActiveFrom15Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSForDisActiveFrom3Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMSForDisActiveFromToday")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings");
                });

            modelBuilder.Entity("Window.Domain.Entities.TechnicalIssues.TechnicalIssues", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalIssues");
                });

            modelBuilder.Entity("Window.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GatewayType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinally")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int>("TransactionWay")
                        .HasColumnType("int");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Window.Domain.Entities.Wallet.WalletData", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GatewayType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WalletId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("WalletData");
                });

            modelBuilder.Entity("Window.Domain.Entities.Account.RolePermission", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Window.Domain.Entities.Account.UserRole", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Article.Article", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Window.Domain.Entities.Comment.Comment", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Contact.Ticket", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "Owner")
                        .WithMany("Tickets")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Window.Domain.Entities.Contact.TicketMessage", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "Sender")
                        .WithMany("TicketMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Contact.Ticket", "Ticket")
                        .WithMany("TicketMessages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Window.Domain.Entities.Contract.RequestForContract", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "Seller")
                        .WithMany("SellerRequest")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("UserRequest")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Inquiry.LogInquiryForUserDetail", b =>
                {
                    b.HasOne("Window.Domain.Entities.Inquiry.LogInquiryForUser", "LogInquiryForUser")
                        .WithMany("logInquiryForUserDetails")
                        .HasForeignKey("LogInquiryForUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Sample.Sample", "Sample")
                        .WithMany("logInquiryForUserDetails")
                        .HasForeignKey("SampleId");

                    b.Navigation("LogInquiryForUser");

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("Window.Domain.Entities.Location.State", b =>
                {
                    b.HasOne("Window.Domain.Entities.Location.State", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Window.Domain.Entities.Log.LogForBrands", b =>
                {
                    b.HasOne("Window.Domain.Entities.Brand.MainBrand", "MainBrand")
                        .WithMany("LogForBrands")
                        .HasForeignKey("MainBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainBrand");
                });

            modelBuilder.Entity("Window.Domain.Entities.Log.LogForInquiry", b =>
                {
                    b.HasOne("Window.Domain.Entities.Location.State", "City")
                        .WithMany("LogCities")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Location.State", "Country")
                        .WithMany("LogCountries")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Location.State", "State")
                        .WithMany("LogStates")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Window.Domain.Entities.Log.LogForVisitSellerProfile", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("LogForVisitSellerProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.Market", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.Role", null)
                        .WithMany("Markets")
                        .HasForeignKey("RoleId");

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithOne("Market")
                        .HasForeignKey("Window.Domain.Entities.Market.Market", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketChargeInfo", b =>
                {
                    b.HasOne("Window.Domain.Entities.Market.Market", "MArket")
                        .WithMany("MarketChargeInfos")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("MarketChargeInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MArket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketLinks", b =>
                {
                    b.HasOne("Window.Domain.Entities.Market.Market", "Market")
                        .WithMany("MarketLinks")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("SellerLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketPersonalInfo", b =>
                {
                    b.HasOne("Window.Domain.Entities.Location.State", "City")
                        .WithMany("UserCities")
                        .HasForeignKey("CityId");

                    b.HasOne("Window.Domain.Entities.Location.State", "Country")
                        .WithMany("UserCountries")
                        .HasForeignKey("CountryId");

                    b.HasOne("Window.Domain.Entities.Market.Market", "Market")
                        .WithOne("MarketPersonalInfo")
                        .HasForeignKey("Window.Domain.Entities.Market.MarketPersonalInfo", "MarketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Location.State", "State")
                        .WithMany("UserStates")
                        .HasForeignKey("StateId");

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithOne("SellersPersonalInfos")
                        .HasForeignKey("Window.Domain.Entities.Market.MarketPersonalInfo", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Market");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketUsers", b =>
                {
                    b.HasOne("Window.Domain.Entities.Market.Market", "Market")
                        .WithMany("MarketUsers")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.MarketWorkSamle", b =>
                {
                    b.HasOne("Window.Domain.Entities.Market.Market", "Market")
                        .WithMany("MarketWorkSamle")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("SellerWorkSamles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Market");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.KhadamatePasAzForosh", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("KhadamatePasAzForosh")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.PasokhGoie", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("PasokhGoie")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.ScoreForMarket", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("Score")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.SehateEtelaAt", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("SehateEtelaAt")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.MarketInfo.TaAhodeZamaneTahvil", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("TaAhodeZamaneTahvil")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.GlassPricing", b =>
                {
                    b.HasOne("Window.Domain.Entities.Glass.Glass", "Glass")
                        .WithMany("GlassPricings")
                        .HasForeignKey("GlassId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("GlassPricings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Glass");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.Product", b =>
                {
                    b.HasOne("Window.Domain.Entities.Brand.MainBrand", "MainBrand")
                        .WithMany("Products")
                        .HasForeignKey("MainBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("Product")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainBrand");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.ProductMainBrandPrice", b =>
                {
                    b.HasOne("Window.Domain.Entities.Brand.MainBrand", "MainBrand")
                        .WithMany("ProductMainBrandPrice")
                        .HasForeignKey("MainBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductMainBrandPrice")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Segment.Segment", "Segment")
                        .WithMany("ProductMainBrandPrice")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MainBrand");

                    b.Navigation("Product");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.ProductYaraghBrandPrice", b =>
                {
                    b.HasOne("Window.Domain.Entities.Product.Product", "Product")
                        .WithMany("ProductYaraghBrandPrice")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Segment.Segment", "Segment")
                        .WithMany("ProductYaraghBrandPrice")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Brand.YaraghBrand", "YaraghBrand")
                        .WithMany("ProductYaraghBrandPrice")
                        .HasForeignKey("YaraghBrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Segment");

                    b.Navigation("YaraghBrand");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.SegmentPricing", b =>
                {
                    b.HasOne("Window.Domain.Entities.Product.Product", "Product")
                        .WithMany("SegmentPricings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Segment.Segment", "Segment")
                        .WithMany("SegmentPricings")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Window.Domain.Entities.Sample.SampleSelectedSegment", b =>
                {
                    b.HasOne("Window.Domain.Entities.Sample.Sample", "Sample")
                        .WithMany("SampleSelectedSegment")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Window.Domain.Entities.Segment.Segment", "Segment")
                        .WithMany("SampleSelectedSegment")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sample");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("Window.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.HasOne("Window.Domain.Entities.Account.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Window.Domain.Entities.Wallet.WalletData", b =>
                {
                    b.HasOne("Window.Domain.Entities.Wallet.Wallet", "Wallet")
                        .WithOne("WalletData")
                        .HasForeignKey("Window.Domain.Entities.Wallet.WalletData", "WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Window.Domain.Entities.Account.Role", b =>
                {
                    b.Navigation("Markets");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Window.Domain.Entities.Account.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comment");

                    b.Navigation("GlassPricings");

                    b.Navigation("KhadamatePasAzForosh");

                    b.Navigation("LogForVisitSellerProfiles");

                    b.Navigation("Market")
                        .IsRequired();

                    b.Navigation("MarketChargeInfos");

                    b.Navigation("PasokhGoie");

                    b.Navigation("Product");

                    b.Navigation("Score");

                    b.Navigation("SehateEtelaAt");

                    b.Navigation("SellerLinks");

                    b.Navigation("SellerRequest");

                    b.Navigation("SellerWorkSamles");

                    b.Navigation("SellersPersonalInfos")
                        .IsRequired();

                    b.Navigation("TaAhodeZamaneTahvil");

                    b.Navigation("TicketMessages");

                    b.Navigation("Tickets");

                    b.Navigation("UserRequest");

                    b.Navigation("UserRoles");

                    b.Navigation("Wallets");
                });

            modelBuilder.Entity("Window.Domain.Entities.Brand.MainBrand", b =>
                {
                    b.Navigation("LogForBrands");

                    b.Navigation("ProductMainBrandPrice");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Window.Domain.Entities.Brand.YaraghBrand", b =>
                {
                    b.Navigation("ProductYaraghBrandPrice");
                });

            modelBuilder.Entity("Window.Domain.Entities.Contact.Ticket", b =>
                {
                    b.Navigation("TicketMessages");
                });

            modelBuilder.Entity("Window.Domain.Entities.Glass.Glass", b =>
                {
                    b.Navigation("GlassPricings");
                });

            modelBuilder.Entity("Window.Domain.Entities.Inquiry.LogInquiryForUser", b =>
                {
                    b.Navigation("logInquiryForUserDetails");
                });

            modelBuilder.Entity("Window.Domain.Entities.Location.State", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LogCities");

                    b.Navigation("LogCountries");

                    b.Navigation("LogStates");

                    b.Navigation("UserCities");

                    b.Navigation("UserCountries");

                    b.Navigation("UserStates");
                });

            modelBuilder.Entity("Window.Domain.Entities.Market.Market", b =>
                {
                    b.Navigation("MarketChargeInfos");

                    b.Navigation("MarketLinks");

                    b.Navigation("MarketPersonalInfo")
                        .IsRequired();

                    b.Navigation("MarketUsers");

                    b.Navigation("MarketWorkSamle");
                });

            modelBuilder.Entity("Window.Domain.Entities.Product.Product", b =>
                {
                    b.Navigation("ProductMainBrandPrice");

                    b.Navigation("ProductYaraghBrandPrice");

                    b.Navigation("SegmentPricings");
                });

            modelBuilder.Entity("Window.Domain.Entities.Sample.Sample", b =>
                {
                    b.Navigation("SampleSelectedSegment");

                    b.Navigation("logInquiryForUserDetails");
                });

            modelBuilder.Entity("Window.Domain.Entities.Segment.Segment", b =>
                {
                    b.Navigation("ProductMainBrandPrice");

                    b.Navigation("ProductYaraghBrandPrice");

                    b.Navigation("SampleSelectedSegment");

                    b.Navigation("SegmentPricings");
                });

            modelBuilder.Entity("Window.Domain.Entities.Wallet.Wallet", b =>
                {
                    b.Navigation("WalletData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
